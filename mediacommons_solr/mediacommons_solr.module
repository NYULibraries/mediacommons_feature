<?php

/**
 * http://api.drupal.org/api/drupal/modules--aggregator--aggregator.module/function/aggregator_cron/7
 */
// function mediacommons_solr_cron() {}

/**
 * Allows a module to modify the delete query. Only delete this site nodes from index
 *
 * @param string $query
 *   Defaults to *:*
 */
function mediacommons_solr_apachesolr_delete_index_alter($query) {
  $query = 'hash:' . apachesolr_site_hash();
}

/**
 * Build the documents before sending them to Solr.
 * The function is the follow-up for apachesolr_update_index
 *
 * @param integer $document_id
 * @param array $entity
 * @param string $entity_type
 */
function mediacommons_solr_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  /** wrap node with Entity API */
  //$ewrapper = entity_metadata_wrapper('node', $entity);
  $document->addField('ss_project', variable_set('mediacommons_project', 'project');
  $document->addField('ss_baseurl', base_path());
}

/**
 * This is invoked by apachesolr_search.module for each document returned in a
 * search. This has been introduced in 6.x-beta7 as a replacement for the call
 * to HOOK_nodeapi().
 *
 * @param ApacheSolrDocument $document
 *   The ApacheSolrDocument instance.
 * @param array $extra
 * @param DrupalSolrQueryInterface $query
 */
//function mediacommons_solr_apachesolr_search_result_alter(ApacheSolrDocument $document, array &$extra, DrupalSolrQueryInterface $query) {}

/**
 * This is invoked by apachesolr_search.module for the whole resultset returned
 * in a search.
 *
 * @param array $results
 *   The returned search results.
 * @param DrupalSolrQueryInterface $query
 *   The query for which we want to process the results from
 */
//function hook_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
//  foreach ($results as $id => $result) {
//    $results[$id]['title'] = t('[Result] !title', array('!title' => $result['title']));
//  }
//}
