<?php

/**
 * @file
 * MediaCommons Integration with the Apache Solr module.
 */
include_once 'mediacommons_solr.datasource.inc';

include_once 'mediacommons_solr.index.inc';

include_once 'mediacommons_solr.results.inc';

/**
 * Implements hook_theme($existing, $type, $theme, $path)
 * Register a module (or theme's) theme implementations.
 * See: mediacommons_solr_preprocess_search_result
 * See: https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7.x
 */
function mediacommons_solr_theme() {
  $themes = array();
  $templates = drupal_get_path('module', 'mediacommons_solr') . '/templates';
  foreach (node_type_get_types() as $bundle => $type) {
    $template_node = 'mediacommons_solr_search_result__' . $bundle;
	// nodes
    if (file_exists($templates . '/' . $template_node . '.tpl.php')) {
	  $template_node_file = 'templates/' . $template_node;
      $themes [$template_node] = array(
        'variables' => array(),
        'template' => $template_node_file,
      );
    }
    // comments
    $template_comment = 'mediacommons_solr_search_result__comment_node_' . $bundle;
    if (file_exists($templates . '/' . $template_comment . '.tpl.php')) {
      $template_comment_file = 'templates/' . $template_comment;
      $themes [$template_comment] = array(
        'variables' => array(),
        'template' => $template_comment_file,
      );
    }
  }

  $themes ['mediacommons_solr_search_result__base'] = array(
    'variables' => array(),
    'template' => 'templates/mediacommons_solr_search_result__base',
  );

  $themes['mediacommons_solr_hcard'] = array(
    'variables' => array(
      'peoplelist' => array(),
    ),
    'template' => 'templates/mediacommons_solr_hcard',
  );

  return $themes;

}

/**
 * Implements hook_user_view().
 */
function mediacommons_solr_user_view($account, $view_mode) {
  $is_account = mediacommons_solr_is_account($account);
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function mediacommons_solr_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  // add FL's
  $query->replaceParam ( 'fl', array_merge ( $query->getParam ( 'fl' ), mediacommons_solr_fls () ) );
  // while I debug
  $query->addFilter ( 'bundle', 'comment_node_spoke' );
}

function mediacommons_solr_is_account($account = NULL) {
  $is_account = &drupal_static('is_account');
  if (!isset($is_account)) {
    if (isset($account) && isset($account->uid)) {
      $is_account = $account->uid;
    }
    else {
      $args = arg();
      if (count($args) == 2 && $args [0] == 'user') {
        $is_account = intval($args[1]);
      }
    }
  }
  return $is_account;
}

function mediacommons_solr_fls() {
  return array (
    'ss_project',
    'ss_baseurl',
    'ss_searchtype',
    'ss_projectname',
    'ss_projectclass',
    'im_coeditor',
    'im_curatorseditors',
    'im_contributor',
    'im_reviewer',
    'ss_pubdate',
    'is_comment_count',
    'ss_reviewer', // JSON object
    'ss_contributors', // JSON object
    'ss_curatorseditors', // JSON object
    'ss_coeditor', // JSON object
    'ss_ri', // JSON object including all image styles URL
    'ss_periodstart',
    'ss_createddate',
    'ss_cdyyyymmdd',
    'ss_pubdate',
    'ss_periodend',
    'ss_enddate',
    'ss_edyyyymmdd',
    'ss_referencedspoke',
  );
}
