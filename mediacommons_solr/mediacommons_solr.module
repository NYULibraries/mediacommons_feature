<?php

/**
 * @file
 * MediaCommons Integration with the Apache Solr module.
 */

include_once 'mediacommons_solr.datasource.inc';

/**
 * Implements hook_theme($existing, $type, $theme, $path)
 * Register a module (or theme's) theme implementations.
 * See: mediacommons_solr_preprocess_search_result
 * See: https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7.x
 */
function mediacommons_solr_theme() {
  $themes = array();
  $templates = drupal_get_path('module', 'mediacommons_solr') . '/templates';
  foreach (node_type_get_types() as $bundle => $type) {
    $template = 'mediacommons_solr_search_result__' . $bundle;
    if (file_exists($templates . '/' . $template . '.tpl.php')) {
      $template_file = 'templates/' . $template;
      $themes[$template] = array(
        'variables' => array(),
        'template' => $template_file,
      );
    }
  }
  $themes['mediacommons_solr_search_result__base'] = array(
    'variables' => array(),
  	'template' => 'templates/mediacommons_solr_search_result__base',
  );
  $themes['mediacommons_solr_hcard'] = array(
    'variables' => array(
      'peoplelist' => array()
    ),
    'template' => 'templates/mediacommons_solr_hcard',
  );
  return $themes;
}

/**
 * Process variables for mediacommons_solr_hcard.tpl.php.
 */
function mediacommons_solr_preprocess_mediacommons_solr_hcard(&$variables) {
  // dpm($variables['peoplelist']);
}

/**
 * Implements hook_user_view().
 */
function mediacommons_solr_user_view($account, $view_mode) {
  $is_account = mediacommons_solr_is_account($account);
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function mediacommons_solr_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  /** add FL's */
  $query->replaceParam('fl', array_merge($query->getParam('fl'), mediacommons_solr_fls()));
}

/**
 * Build the documents before sending them to Solr.
 * The function is the follow-up for apachesolr_update_index
 *
 * @param integer $document_id
 * @param array $entity
 * @param string $entity_type
 */
function mediacommons_solr_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  global $base_url;
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  switch ($wrapper->getBundle()) {
    case 'review' :
      foreach ($wrapper->field_reviewer->value() as $delta => $item) {
        if ($item->uid !== $entity->uid) {
          $document->addField('im_contributors', $item->uid);
          $document->addField('im_reviewer', $item->uid);
        }
      }
      break;
    case 'spoke' :
      foreach ($wrapper->field_contributors->value() as $delta => $item) {
        if ($item->uid !== $entity->uid) {
          $document->addField('im_contributors', $item->uid);
          $document->addField('im_contributor', $item->uid);
        }
      }
      $ri = array();
      $representativeimage = $wrapper->field_representative_image->value();
      if ($representativeimage['fid']) {
      	foreach (image_styles() as $style) {
      		$derivative_uri = image_style_path($style['name'], $representativeimage['uri']);
      		if (!file_exists($derivative_uri)) {
      			$image = image_style_create_derivative($style, $representativeimage['uri'], $derivative_uri);
      			if ($image) {
      				$imageurl  = file_create_url($derivative_uri);
      			}
      		}
      		else {
      			$imageurl  = file_create_url($derivative_uri);
      		}
      		$ri[$style['name']] = $imageurl;
      	}
      }
      $document->addField('ss_ri', json_encode($ri));
      $pubdate = $wrapper->field_pubdate->value();
      $document->addField('ss_pubdate', $pubdate);
      break;
    case 'hub' :
      $ri = array();
      $representativeimage = $wrapper->field_representative_image->value();
      if ($representativeimage['fid']) {
        foreach (image_styles() as $style) {
          $derivative_uri = image_style_path($style['name'], $representativeimage['uri']);
          if (!file_exists($derivative_uri)) {
            $image = image_style_create_derivative($style, $representativeimage['uri'], $derivative_uri);
            if ($image) {
              $imageurl  = file_create_url($derivative_uri);
            }
          }
          else {
            $imageurl  = file_create_url($derivative_uri);
          }
          if ($imageurl) {
            $ri[$style['name']] = $imageurl;
          }
        }
      }
      $document->addField('ss_ri', json_encode($ri));      
      foreach ($wrapper->field_contributors->value() as $delta => $item) {
        if ($item->uid !== $entity->uid) {
          $document->addField('im_contributors', $item->uid);
          $document->addField('im_contributor', $item->uid);
        }
      }
      foreach ($wrapper->field_curators_editors->value() as $delta => $item) {
        if ($item->uid !== $entity->uid) {
          $document->addField('im_contributors', $item->uid);
          $document->addField('im_curatorseditors', $item->uid);
        }
      }
      foreach ($wrapper->field_co_editor->value() as $delta => $item) {
        if ($item->uid !== $entity->uid) {
          $document->addField('im_contributors', $item->uid);
          $document->addField('im_coeditor', $item->uid);
        }
      }
      $period = $wrapper->field_period->value();
      if (isset($period['value']) && !empty($period['value'])) {
        $document->addField('ss_periodstart', $period['value']);
        $document->addField('ss_pubdate', $period['value']);
      }
      else {
        $document->addField('ss_periodstart', $entity->created);
        $document->addField('ss_pubdate', $entity->created);
      }
      if (isset($period['value2']) && !empty($period['value2'])) {
        $document->addField('ss_periodend', $period['value2']);
      }
      else {
        $document->addField('ss_periodend', $entity->created);
      }
      break;
  }
  $document->addField('im_contributors', $entity->uid);
  $document->addField('ss_searchtype', $wrapper->getBundle());
  $document->addField('ss_baseurl', $base_url);
  $document->addField('ss_project', variable_get('mediacommons_project', 'project'));
  $document->addField('ss_projectname', variable_get('site_name', 'MediaCommons Project'));
  $document->addField('ss_projectclass', theme_get_setting('special_body_class', 'mediacommons'));  
}

/**
 * This is invoked by apachesolr_search.module for the whole resultset returned
 * in a search.
 *
 * @param array $results
 *   The returned search results.
 * @param DrupalSolrQueryInterface $query
 *   The query for which we want to process the results from
 */
function mediacommons_solr_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
  foreach ($results as $id => $result) {
    $results[$id]['coeditor'] = $results[$id]['curatorseditors'] = $results[$id]['contributor'] = $results[$id]['reviewer'] = array();
    $results[$id]['link'] = $results[$id]['fields']['url'];
    $results[$id]['project'] = $results[$id]['fields']['ss_project'];
    $results[$id]['project_url'] = $results[$id]['fields']['ss_baseurl'];
    $results[$id]['searchtype'] = $results[$id]['fields']['ss_searchtype'];
    $results[$id]['projectname'] = $results[$id]['fields']['ss_projectname'];
    $results[$id]['projectclass'] = $results[$id]['fields']['ss_projectclass'];
    $results[$id]['periodstart'] = $results[$id]['fields']['ss_periodstart'];
    $results[$id]['periodend'] = $results[$id]['fields']['ss_periodend'];
    $results[$id]['pubdate'] = $results[$id]['fields']['ss_pubdate'];
    $results[$id]['comment_count'] = $results[$id]['fields']['is_comment_count'];
    if (!empty($results[$id]['fields']['im_coeditor'])) {
      foreach ($results[$id]['fields']['im_coeditor'] as $account) {       
      	$results[$id]['coeditor'][] = user_load($account);
      }
    }
    if (!empty($results[$id]['fields']['im_curatorseditors'])) {
      foreach ($results[$id]['fields']['im_curatorseditors'] as $account) {
        $results[$id]['curatorseditors'][] = user_load($account);
      }
    }    
    if (!empty($results[$id]['fields']['im_contributor'])) {
      foreach ($results[$id]['fields']['im_contributor'] as $account) {
      	$results[$id]['contributor'][] = user_load($account);
      }
    }
    if (!empty($results[$id]['fields']['im_reviewer'])) {
      foreach ($results[$id]['fields']['im_reviewer'] as $account) {
      	$results[$id]['reviewer'][] = user_load($account);
      }
    }
    $results[$id]['ri'] = json_decode($results[$id]['fields']['ss_ri'], TRUE);
  }  
}

function mediacommons_solr_preprocess_search_result_spoke(&$variables) {
  $result = $variables['result'];
  $variables['classes_array'][] = 'node-teaser';
  $variables['classes_array'][] = 'view-mode-teaser';
  $variables['created_date'] = date('F d, Y', $result['pubdate']);
  $variables['pubdate'] = date('F d, Y', $result['pubdate']);
  // Representative Image
  $variables['ri'] = $result['ri'];
  $peoplelist_contributors = array();
  foreach ($result['contributor'] as $person) {
    $organization = '';
    $wrapper = entity_metadata_wrapper('user', $person);
    $field_organization = $wrapper->field_organization->value();
    if ($field_organization) {
      $taxonomy_term_uri = taxonomy_term_uri($field_organization);
      $organization = l($field_organization->name, $taxonomy_term_uri['path']);
    }
    $peoplelist_contributors[] = array(
      'name' => l(format_username($person),'user/' . $person->uid),
      'organization' => $organization,
    );
    $variables['comment_count'] = $result['comment_count'];
    $variables['peoplelist_contributors'] = theme('mediacommons_solr_hcard', array('peoplelist' => $peoplelist_contributors));
  }
}

function mediacommons_solr_preprocess_search_result_hub(&$variables) {
  $result = $variables['result'];
  $variables['classes_array'][] = 'clearfix';
  // Co-editor
  $variables['coeditor'] = $result['coeditor'];
  // Curated by
  $variables['curatorseditors'] = $result['curatorseditors'];
  // Contributor
  $variables['contributor'] = $result['contributor'];
  // Reviewer
  $variables['reviewer'] = $result['reviewer'];
  // Representative Image
  $variables['ri'] = $result['ri'];
  // Period start
  $variables['created_date'] = date('F d, Y', $result['periodstart']);
  $variables['cd_yyyy_mm_dd'] = date('Y-m-d', $result['periodstart']);
  $variables['pubdate'] = date('F d, Y', $result['pubdate']);
  // Period end
  $variables['end_date'] = date('F d, Y', $result['periodend']);
  $variables['ed_yyyy_mm_dd'] = date('Y-m-d', $result['periodend']);
  /**
   * Data needed: All of the curators to a hub, and the links to their
   * profile pages, and their organization, and the link to the org page
   */
  $peoplelist_curator = array();
  foreach($result['curatorseditors'] as $curatorseditor) {
    $organization = '';
    $wrapper = entity_metadata_wrapper('user', $curatorseditor);
    $field_organization = $wrapper->field_organization->value();
    if ($field_organization) {
      $taxonomy_term_uri = taxonomy_term_uri($field_organization);
      $organization = l($field_organization->name, $taxonomy_term_uri['path']);
    }
    $peoplelist_curator[] = array(
      'name' => l(format_username($curatorseditor),'user/' . $curatorseditor->uid),
      'organization' => $organization,
    );
  }
  $variables['peoplelist_curator'] = theme('mediacommons_solr_hcard', array('peoplelist' => $peoplelist_curator));
}

/**
 * Process variables for search-result.tpl.php.
 * https://api.drupal.org/api/drupal/modules%21search%21search.pages.inc/function/template_preprocess_search_result/7.x
 */
function mediacommons_solr_preprocess_search_result(&$variables) {  
  $result = $variables['result'];
  $bundle = $result['bundle'];
  $variables['theme_hook_suggestions'][] = 'mediacommons_solr_search_result__base';
  $variables['theme_hook_suggestions'][] = 'mediacommons_solr_search_result__' . $bundle;
  $variables['projectname'] = $result['projectname'];
  $variables['projectclass'] = $result['projectclass']; 
  $variables['link'] = $result['link'];
  $variables['project'] = $result['project'];
  $variables['project_url'] = $result['project_url'];
  $variables['project_link'] = l($result['projectname'], $result['project_url'], array('external' => TRUE));
  $variables['searchtype'] = $result['searchtype'];
  // add project to class_array
  $variables['classes_array'][] = 'node-' . $variables['projectname'];
  // add bundle to class_array
  $variables['classes_array'][] = 'node-' . $bundle;
  $variables['classes_array'][] = $result['projectclass'];
  switch ($bundle) {
    case 'hub':
      mediacommons_solr_preprocess_search_result_hub($variables);
      break;
    case 'spoke':
      mediacommons_solr_preprocess_search_result_spoke($variables);
      break;    	
  }
}

/**
 * Process variables for search-results.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $results: Search results array.
 * - $module: Module the search results came from (module implementing
 *   hook_search_info()).
 *
 * @see search-results.tpl.php
 */
function mediacommons_solr_preprocess_search_results(&$variables) {
  switch ($variables['search_page']) {
    case 'user_content_by_uid':
      $title = t('As author');
      break;
    case 'user_comments_by_uid':
      $title = t('As commenter');
      break;
    default:
      $title = t('Search results');
  }  
  $variables['title'] = $title;  
}

function mediacommons_solr_is_account($account = NULL) {
  $is_account = &drupal_static('is_account');
  if (!isset($is_account)) {
    if (isset($account) && isset($account->uid)) {
      $is_account = $account->uid;
    }
    else {
      $args = arg();
      if (count($args) == 2 && $args[0] == 'user') {
        $is_account = intval($args[1]);
      }
    }
  }
  return $is_account;
}

function mediacommons_solr_fls() {
  return array(
    'ss_project',
    'ss_baseurl',
    'ss_searchtype',
    'ss_projectname',
    'ss_projectclass',
    'im_coeditor',
    'im_curatorseditors',
    'im_contributor',
    'im_reviewer',
    'ss_periodend',
    'ss_periodstart',
  	'ss_pubdate',
  	'is_comment_count',
    'ss_ri', // representative image as JSON object including all image styles URL
  );
}
