<?php

function mediacommons_solr_init() {
  $conditions = apachesolr_search_conditions();
  $conditions['fq']['is_uid'] = 2;
  // $args = func_get_args();
  // $keys = implode(' ', $args);
  // foreach (apachesolr_search_search_execute($keys) as $result) {
  //   $output = $result['fields']['path'];
  //   if(isset($result['user']) && isset($result['node']->is_uid)) {
  //     $output .= ' ' . dt('by @name (user/@uid)', array('@name' => strip_tags($result['user']), '@uid' => $result['node']->is_uid));
  //   }
  //  $output .= "\n";
  //  $output .= dt('title: ') . $result['title'] . "\n";
  //  $output .= trim(preg_replace('/\s+/', ' ', strip_tags($result['snippet']))) . "\n\n";
  //  drush_print($output);
  //}
}

/**
 * http://api.drupal.org/api/drupal/modules--aggregator--aggregator.module/function/aggregator_cron/7
 */
// function mediacommons_solr_cron() {}

/**
 * Allows a module to modify the delete query. Only delete this site nodes from index
 *
 * @param string $query
 *   Defaults to *:*
 */
function mediacommons_solr_apachesolr_delete_index_alter($query) {
  $query = 'hash:' . apachesolr_site_hash();
}

/**
 * Build the documents before sending them to Solr.
 * The function is the follow-up for apachesolr_update_index
 *
 * @param integer $document_id
 * @param array $entity
 * @param string $entity_type
 */
function mediacommons_solr_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  global $base_url;
  /** wrap node with Entity API */
  //$ewrapper = entity_metadata_wrapper('node', $entity);
  $document->addField('ss_project', variable_get('mediacommons_project', 'project'));
  $document->addField('ss_baseurl', $base_url);
}

/**
 * This is invoked by apachesolr_search.module for each document returned in a
 * search. This has been introduced in 6.x-beta7 as a replacement for the call
 * to HOOK_nodeapi().
 *
 * @param ApacheSolrDocument $document
 *   The ApacheSolrDocument instance.
 * @param array $extra
 * @param DrupalSolrQueryInterface $query
 */
//function mediacommons_solr_apachesolr_search_result_alter(ApacheSolrDocument $document, array &$extra, DrupalSolrQueryInterface $query) {}

/**
 * This is invoked by apachesolr_search.module for the whole resultset returned
 * in a search.
 *
 * @param array $results
 *   The returned search results.
 * @param DrupalSolrQueryInterface $query
 *   The query for which we want to process the results from
 */
//function hook_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
//  foreach ($results as $id => $result) {
//    $results[$id]['title'] = t('[Result] !title', array('!title' => $result['title']));
//  }
//}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mediacommons_solr_block_info () {
  $blocks['mediacommons_solr_usercontent'] = array(
    'info' => t('User content'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mediacommons_solr_block_view ($delta = '') {
	switch ($delta) {
    case 'mediacommons_solr_usercontent' :
    	$block['subject'] = t('User content');
      $block['content'] = mediacommons_solr_usercontent();
      break ;
  }
  return $block ;
}

/**
 * A module-defined block content function.
 */
function mediacommons_solr_usercontent () {

  $content = '<p>' . __FUNCTION__ . '</p>';

  dpm(__FUNCTION__);

  return array('#markup' => $content);

}
