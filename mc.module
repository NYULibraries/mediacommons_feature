<?php

/**
 * Implements hook_init().
 *
 * This hook is run at the beginning of the page request. It is typically
 * used to set up global parameters that are needed later in the request.
 * When this hook is called, the theme and all modules are already loaded
 * in memory.
 *
 * This hook is not run on cached pages.
 *
 * To add CSS or JS that should be present on all pages, modules should
 * not implement this hook, but declare these files in their .info file.
 *
 * See: https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_init/7.x
 *
 */
function mc_init() {
  /**
   * The Access-Control-Allow-Origin response header indicates whether
   * the response can be shared with resources with the given origin.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
   */
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function mc_preprocess_html(&$vars) {
  /**
   * The X-Frame-Options HTTP response header can be used to indicate whether or not a
   * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
   * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
   * not embedded into other sites.
   *
   * The added security is only provided if the user accessing the document is using a
   * browser supporting X-Frame-Options.
   *
   * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
   * from being embedded in an iframe on another domain. We want our sites to be
   * embedded; we need to remove this header.
   *
   * See: https://www.drupal.org/node/2735873
   * See: https://www.owasp.org/index.php/Clickjacking
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   */
    header_remove('X-Frame-Options');
}

function  mc_get_root_url() {

  static $root_url;

  if ($root_url) {
    return $root_url;
  }

  // NOTE: gethostname() does not work for local /etc/hosts/ aliases.
  if (drupal_is_cli() && isset($GLOBALS['mc_umbrella_baseurl'])) {
    // drush_log('Umbrella : ' . $GLOBALS['mc_umbrella_baseurl'], 'ok');
    // drush_log('Site : ' . $GLOBALS['mc_site_baseurl'], 'ok');
    // print_r($GLOBALS['mc_sites']);
    $root_url = $GLOBALS['mc_umbrella_baseurl'];
  }
  else {
    $hostname = $_SERVER['SERVER_NAME'];
    // Don't just do `$_SERVER['HTTPS'] ? 'https' : 'http';`.  This will throw an
    // error "Notice: Undefined index: HTTPS" which is not fatal but is printed on
    // on the page.
    if ( array_key_exists( 'HTTPS', $_SERVER ) ) {
      // It's unclear from http://php.net/manual/en/reserved.variables.server.php
      // whether the existence of the key is enough.  Test if it's "non-empty".
      $protocol = empty( $_SERVER['HTTPS'] ) ? 'https' : 'http';
    }
    else {
      $protocol = 'http';
    }
    $port = ($_SERVER['SERVER_PORT'] === '80' || !isset($_SERVER['SERVER_PORT'])) ? '' : ':' . $_SERVER['SERVER_PORT'];
    $root_url = "${protocol}://${hostname}${port}";  
  }
  return $root_url;
}

function mediacommons_homepage_umbrella_url() {
  if (function_exists('__host_root()')) {
    return __host_root();
  }
  else {
    return mc_get_root_url();
  }
}

function mc_project_url($project = NULL) {
  global $base_url;
  if ($project) {
    return mediacommons_homepage_umbrella_url() . '/' . $project;
  }
  else {
    return $base_url;
  }
}

function mediacommons_utilities_is_project_redirect($path) {
  // Some browsers treat \ as / so normalize to forward slashes.
  $path = str_replace('\\', '/', $path);
  // If the path starts with a backslash then it is considered an project redirect
  $substr = substr($path, 0, 1);
  if ($substr == '/') {
    return drupal_strip_dangerous_protocols($path);
  }
  else {
    return FALSE;
  }
}
