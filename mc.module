<?php

/**
 * Implements hook_init().
 *
 * This hook is run at the beginning of the page request. It is typically
 * used to set up global parameters that are needed later in the request.
 * When this hook is called, the theme and all modules are already loaded
 * in memory.
 *
 * This hook is not run on cached pages.
 *
 * To add CSS or JS that should be present on all pages, modules should
 * not implement this hook, but declare these files in their .info file.
 *
 * See: https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_init/7.x
 *
 */
function mc_init() {
  /**
   * The Access-Control-Allow-Origin response header indicates whether
   * the response can be shared with resources with the given origin.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
   */
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function mc_preprocess_html(&$vars) {
  /**
   * The X-Frame-Options HTTP response header can be used to indicate whether or not a
   * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
   * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
   * not embedded into other sites.
   *
   * The added security is only provided if the user accessing the document is using a
   * browser supporting X-Frame-Options.
   *
   * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
   * from being embedded in an iframe on another domain. We want our sites to be
   * embedded; we need to remove this header.
   *
   * See: https://www.drupal.org/node/2735873
   * See: https://www.owasp.org/index.php/Clickjacking
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   */
    header_remove('X-Frame-Options');
}

function  mc_get_root_url() {

  static $root_url;

  if ($root_url) {
    return $root_url;
  }

  // NOTE: gethostname() does not work for local /etc/hosts/ aliases.
  if (drupal_is_cli() && isset($GLOBALS['mc_umbrella_baseurl'])) {
    // drush_log('Umbrella : ' . $GLOBALS['mc_umbrella_baseurl'], 'ok');
    // drush_log('Site : ' . $GLOBALS['mc_site_baseurl'], 'ok');
    // print_r($GLOBALS['mc_sites']);
    $root_url = $GLOBALS['mc_umbrella_baseurl'];
  }
  else {
    $hostname = $_SERVER['SERVER_NAME'];
    // Don't just do `$_SERVER['HTTPS'] ? 'https' : 'http';`.  This will throw an
    // error "Notice: Undefined index: HTTPS" which is not fatal but is printed on
    // on the page.
    if ( array_key_exists( 'HTTPS', $_SERVER ) ) {
      // It's unclear from http://php.net/manual/en/reserved.variables.server.php
      // whether the existence of the key is enough.  Test if it's "non-empty".
      $protocol = empty( $_SERVER['HTTPS'] ) ? 'https' : 'http';
    }
    else {
      $protocol = 'http';
    }
    $port = ($_SERVER['SERVER_PORT'] === '80' || !isset($_SERVER['SERVER_PORT'])) ? '' : ':' . $_SERVER['SERVER_PORT'];
    $root_url = "${protocol}://${hostname}${port}";  
  }
  return $root_url;
}

function mediacommons_homepage_umbrella_url() {
  if (function_exists('__host_root()')) {
    return __host_root();
  }
  else {
    return mc_get_root_url();
  }
}

function mc_project_url($project = NULL) {
  global $base_url;
  if ($project) {
    return mediacommons_homepage_umbrella_url() . '/' . $project;
  }
  else {
    return $base_url;
  }
}

function mediacommons_utilities_is_project_redirect($path) {
  // Some browsers treat \ as / so normalize to forward slashes.
  $path = str_replace('\\', '/', $path);
  // If the path starts with a backslash then it is considered an project redirect
  $substr = substr($path, 0, 1);
  if ($substr == '/') {
    return drupal_strip_dangerous_protocols($path);
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_user_update
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_update/7.x
 */
function mc_user_update(&$edit, $account, $category) {
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
                  ->entityCondition('bundle', 'project')
                  ->propertyCondition('status', 1)
                  ->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    foreach ($keys as $nid) {
      $node = node_load($nid);
      $wrapper = entity_metadata_wrapper('node', $node);
      db_insert('mc_network_actions')->fields(array(
        'processed' => 0,
        'type' => __FUNCTION__,
        'project' => $wrapper->field_identifier->value(),
        'callback' => 'drupal_flush_all_caches',
        'data' => serialize(
          array(
            'uid' => $account->uid,
            'mail' => $account->mail,
            'uuid' => $account->uuid,
          )
        ),
        'created' => $_SERVER['REQUEST_TIME'],
        'changed' => $_SERVER['REQUEST_TIME'], 
      ))->execute();
      unset($wrapper);
      unset($node);
    }
  }  
}

function mc_initialize_schema($module, &$schema) {
  // Set the name and module key for all tables.
  foreach ($schema as $name => $table) {
    if (empty($table['module'])) {
      $schema[$name]['module'] = $module;
    }
    if (!isset($table['name'])) {
      $schema[$name]['name'] = $name;
    }
  }
}

function mc_list_schemas() {
  $schema = array();
  $schema['mc_network_actions'] = array(
    'description' => 'Stores a record of Bitstreams.',
    'fields' => array(
      'aid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'processed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'project' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),    
      'callback' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),  
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing properties that do not warrant a dedicated column.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'aid' => array('aid'),
    ),
    'primary key' => array('aid'),
  );
  return $schema;
}

/**
 * Enable login_emailusername module
 */
function mc_update_7001(&$sandbox) {
  module_enable(array('login_emailusername'));
}

/**
 * Update page field_pubstat instance. Hide it.
 */
function mc_update_7002() {
  // Fetch an instance info array.
  $instance_info = field_info_instance('node', 'field_pubstat', 'page');
  // Change a single property in the instance definition.
  unset($instance_info['display']['default']['module']);
  $instance_info['display']['default']['type'] = 'hidden';
  // Write the changed definition back.
  field_update_instance($instance_info);
}

/**
 * Turn off theme debug
 */
function mc_update_7003() {
  if (drupal_is_cli()) {
    $hostname = php_uname('n');
    if ($hostname == 'stagemc2.dlib.nyu.edu' || $hostname == 'mc2.dlib.nyu.edu') {
      variable_set('theme_debug', 0);
      $modules = array(
        'devel',
        'ds_devel',
      );
      module_disable($modules);
    }
  }
}

/**
 * Adds table to register network actions
 */
function mc_update_7010() {

  if (!db_table_exists('mc_network_actions')) {
    
    $list_schemas = mc_list_schemas();

    $schemas = array(
      'mc_network_actions' => $list_schemas['mc_network_actions'],
    );
    
    mc_initialize_schema('mc', $schemas);

    foreach ($schemas as $name => $schema) {
      if (!db_table_exists($name)) {
        db_create_table($name, $schema);
      }
    }

  }

  module_enable(array('projects'));

  drupal_flush_all_caches();

  $data = json_decode(file_get_contents(__DIR__ . '/features/projects/nodes.json'));
  
  $values = array(
    'type' => 'project',
    'uid' => 1,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
    'language' => LANGUAGE_NONE,
  );

  foreach ($data->nodes as $node) {
    $entity = entity_create('node', $values);
    $wrapper = entity_metadata_wrapper('node', $entity);
    $wrapper->title->set($node->label);
    $wrapper->field_identifier->set($node->identifier);
    $wrapper->field_shortname->set($node->shortname);
    $wrapper->field_description->set($node->description);
    $wrapper->field_path->set($node->path);
    $wrapper->save();
    unset($wrapper);
    unset($entity);
  }

}
