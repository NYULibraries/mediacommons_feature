<?php

/**
 * @file
 * Module file for mediacommons_block.
 */

function mediacommons_apis_views_pre_render(&$view) {
  dpm('Views pre-render ' . $view->name);
}

/**
 * Implementation of hook_theme().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
 */
function mediacommons_apis_theme() {
  return array(
    'node__spoke__teaser' => array(
  	  'render element' => 'content',
  		'base hook' => 'node',
  		'template' => 'templates/node--spoke--teaser',
  	),
  );
}

function mediacommons_apis_process_field(&$variables, $hook) {
  $name = $variables['element']['#field_name'];
  $bundle = $variables['element']['#bundle'];
  if ($bundle == 'spoke' && ($name == 'title' || $name == 'field_attached_images')) {
    $now = time();
    $variables['label_link'] = FALSE;
    $node = $variables['element']['#object'];
    $wrapper = entity_metadata_wrapper('node', $node);
    $pubdate = $wrapper->field_pubdate->value();
    if ($pubdate > $now) {
      if ($name == 'field_attached_images') {
        foreach ($variables['items'] as $key => $item) {
          // https://api.drupal.org/api/drupal/modules%21image%21image.field.inc/function/theme_image_formatter/7.x
          unset($variables['items'][$key]['#path']);
        }
      }
      if ($name == 'title') {      
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['#markup'] = $wrapper->label();
        }
      }
    }
  }
}

function mediacommons_apis_process_node_spoke(&$variables, $wrapper) {
  $now = time();
  $pubdate = $wrapper->field_pubdate->value();
  if ($pubdate > $now) {
    $variables['classes'] = $variables['classes'] . ' is-available';
  }
  else {
    $variables['classes'] = $variables['classes'] . ' not-available';
  }
}

function mediacommons_apis_process_node(&$variables) {
  $wrapper = entity_metadata_wrapper('node', $variables['node']);
  $callback = __FUNCTION__ . '_' . $wrapper->getBundle();
  if (function_exists($callback)) {
    $callback($variables, $wrapper);
  }
}

 /**
  * Implements hook_init().
  *
  * This hook is run at the beginning of the page request. It is typically
  * used to set up global parameters that are needed later in the request.
  * When this hook is called, the theme and all modules are already loaded
  * in memory.
  *
  * This hook is not run on cached pages.
  *
  * To add CSS or JS that should be present on all pages, modules should
  * not implement this hook, but declare these files in their .info file.
  *
  * See: https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_init/7.x
  *
  */
 function mediacommons_apis_init() {
   /**
    * The Access-Control-Allow-Origin response header indicates whether
    * the response can be shared with resources with the given origin.
    *
    * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
    */
   drupal_add_http_header('Access-Control-Allow-Origin', '*');
 }

 /**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function mediacommons_apis_preprocess_html(&$vars) {
  /**
   * The X-Frame-Options HTTP response header can be used to indicate whether or not a
   * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
   * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
   * not embedded into other sites.
   *
   * The added security is only provided if the user accessing the document is using a
   * browser supporting X-Frame-Options.
   *
   * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
   * from being embedded in an iframe on another domain. We want our sites to be
   * embedded; we need to remove this header.
   *
   * See: https://www.drupal.org/node/2735873
   * See: https://www.owasp.org/index.php/Clickjacking
   * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
   *
   */
  header_remove('X-Frame-Options');
}

function mediacommons_apis_is_pjax() {
  $is_pjax = &drupal_static('is_pjax');
  if (!isset($is_pjax) && function_exists('getallheaders')) {
    $headers = getallheaders();
    if (isset($headers['X-Pjax']) || isset($headers['X-PJAX'])) {
      drupal_add_http_header('uri', request_uri());
      $is_pjax = TRUE;
    }
    else {
      $params = drupal_get_query_parameters();
      if (isset($params['pjax'])) {
        drupal_add_http_header('uri', base_path() . request_uri());
        $is_pjax = TRUE;
      }
      else {
        $is_pjax = FALSE;
      }
    }
  }
  return $is_pjax;
}

function mediacommons_apis_is_embed() {
	$is_embed = &drupal_static('is_embed');
	if (!isset($is_embed)) {
		$params = drupal_get_query_parameters();
		if (isset($params['embed'])) {
		  if ($params['embed'] === '1' || $params['embed'] === 'true') {
		  	$is_embed = TRUE;
		  }
		  else {
		  	$is_embed = FALSE;
		  }
		}
  }
	return $is_embed;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mediacommons_apis_block_info() {
  $blocks['mc_apis_status'] = array (
    'info' => t('Site status'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mediacommons_apis_block_view($delta = '') {
	switch ( $delta ) {
    case 'mc_apis_status':
    	$block['subject'] = t('Site status');
      $block['content'] = mediacommons_apis_content();
      break ;
  }
  return $block ;
}

/**
 * A module-defined block content function.
 */
function mediacommons_apis_contents() {
  $block_content = '<div class="powered">Powered by <a href="http://dlib.nyu.edu/dlts/" target="_blank">NYU DLTS</a></div>';
  return array('#markup' => $block_content);
}

/**
 * Package and send page callback as JSON/JSONP.
 * See: http://api.drupal.org/api/drupal/includes--common.inc/function/drupal_deliver_html_page/7
 *
 * @param $page_callback_result
 * A keyed array to be converted into JSON
 */
function mediacommons_apis_deliver_json($page_callback_result) {

	/** Send appropriate HTTP-Header for browsers and search engines. */
	global $language;
	drupal_add_http_header('Content-Language', $language->language);

	/** Menu status constants are integers; page content is a string or array. */
	if (is_int($page_callback_result)) {
		switch ($page_callback_result) {

			/*
			 * Send a 404 response.
			*/
			case MENU_NOT_FOUND:
				drupal_add_http_header('Status', 'HTTP/1.1 404 Not Found');
				watchdog('Request not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

				$page_callback_result = array(
						'msg' => t('404 Not Found'),
						'code' => 404,
				);
				break;

				/*
				 * Send a 403 response.
				*/
			case MENU_ACCESS_DENIED:
				drupal_add_http_header('Status', 'HTTP/1.1 403 Forbidden');
				watchdog('dlts_utilities', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

				$page_callback_result = array(
						'msg' => t('403 Forbidden'),
						'code' => 403,
				);
				break;

				/*
				 * Send a 503 response.
				*/
			case MENU_SITE_OFFLINE:
				drupal_add_http_header('Status', 'HTTP/1.1 503 Service unavailable');
				$page_callback_result = array(
						'msg' => t('503 Service unavailable.') . filter_xss_admin(variable_get('site_offline_message', t(' @site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => variable_get('site_name', 'Drupal'))))),
						'code' => 503,
				);
				break;
		}
	}

	// Only add Content-Length if we actually have any content. Some non-standard
	// servers get confused by Content-Length in at least HEAD/GET requests
	// $content_length = strlen($data);
	// if ($content_length > 0 || $method == 'POST' || $method == 'PUT') {
	//  $defaults['Content-Length'] = 'Content-Length: '. $content_length;
		// }

		if (isset($page_callback_result)) {
			if (array_key_exists('callback', $_GET)) {
				drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
				echo sprintf('%s(%s);', filter_xss($_GET['callback'], array()), drupal_json_encode($page_callback_result));
			} else {
				drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
				echo drupal_json_encode($page_callback_result);
			}
		}
}

/**
 * Implements hook_menu().
 */
function mediacommons_apis_menu() {
	$menu = array (
    'apis/status' => array (
      'title' => 'Site status',
			'access arguments' => array('access content'),
			'page callback' => 'mediacommons_apis_status_report',
    	'delivery callback' => 'mediacommons_apis_deliver_json',
      'type' => MENU_CALLBACK,
    ) ,
  );
  return $menu ;
}

function mediacommons_apis_status_report() {
  return json_decode(variable_get('mediacommons_migration_status', '{}'));
}
