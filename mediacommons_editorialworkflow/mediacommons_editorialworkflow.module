<?php

module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.theme');
module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.datasource');
module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.queue');

function mediacommons_editorialworkflow_init () {
  global $user;
  $path_is_admin = path_is_admin(current_path());
  if ($path_is_admin) {
    $menu_object = menu_get_object();
    $user->contribute = array(
      'hubs_can_contribute' => mediacommons_editorialworkflow_hubs_user_can_contribute(),
      'spokes_can_contribute' => mediacommons_editorialworkflow_contributor(),
    );
    if (isset( $menu_object)) {
      $user->contribute += array(
        'current_nid' => $menu_object->nid,
        'current_uid' => $menu_object->uid,
        'current_title' => $menu_object->title,
        'type' => $menu_object->type,
        'path_is_admin' => $path_is_admin,
      );
      /** primary author */
      if ($user->uid == $menu_object->uid) {
        $user->contribute += array(
          'contributor' => TRUE,
          'role' => 'primary author',
        );
      }
      /** admin, additional author or no privileges */
      else {
        /** Check if user is admin or an additional author **/
        if ( in_array( 'administrator', $user->roles ) ) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'administrator',
          );
        }
        else if (in_array($user->contribute['current_nid'], $user->contribute['spokes_can_contribute'])) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'additional author',
          );
        }
        else {
          $user->contribute += array(
            'contributor' => FALSE,
            'role' => 'no-privilege',
          );
        }
      }
    }
  }
}

function mediacommons_editorialworkflow_menu() {
  $items['admin/contribute'] = array(
    'title' => t('Contribute'),
    'page callback' => 'mediacommons_editorialworkflow_contribute_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'weight' => 1,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/contribute/dashboard'] = array(
    'title' => t('Administrate site'),
    'description' => 'Manage users, set current hub and upcoming hubs.',
    'page callback' => 'mediacommons_editorialworkflow_admin_page',
    'page arguments' => array(1),
    'access arguments' => array('access dashboard'),
    'weight' => 3,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/contribute/dashboard/set-current-hub'] = array(
    'title' => 'Set current cluster',
    'description' => 'Set current hub, selected item will be displayed in the frontpage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacommons_editorialworkflow_set_current_hub'),
    'access arguments' => array('set current hub'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function mediacommons_editorialworkflow_permission() {
  return array(
    'access mediacommons content' => array(
      'title' => t('Access mediacommons content'),
      'description' => t('Access mediacommons content'),
    ),
    'contribute content spoke' => array(
      'title' => t('Contribute spoke'),
      'description' => t('Contribute spoke'),
    ),
    'contribute content hub' => array(
      'title' => t('Contribute hubs'),
      'description' => t('Contribute hubs'),
    ),
    'promote hub content' => array(
      'title' => t('Promote hubs'),
      'description' => t('Promote hubs'),
    ),
    'set current hub' => array(
      'title' => t('Set current hub'),
      'description' => t('Set current hub'),
    ),
    'set upcoming hub' => array(
      'title' => t('Set upcoming hub'),
      'description' => t('Set upcoming hub'),
    ),
    'admin contributors content' => array(
      'title' => t('Admin contributors content'),
      'description' => t('Admin contributors content'),
    ),
    'access mediacommons dashboard' => array(
      'title' => t('Access mediacommons dashboard'),
      'description' => t('Access mediacommons dashboard'),
    ),
    'promote users role' => array(
      'title' => t('Promote authenticaded user'),
      'description' => t('User is allow to promote authenticaded users to contributor role'),
    ),
    'publish content' => array(
      'title' => t('Publish content'),
      'description' => t('User is allow to publish content'),
    ),
  );
}

function mediacommons_editorialworkflow_node_presave ($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // https://jira.nyu.edu/jira/browse/MC-250
  if ($node->type == 'hub' || $node->type == 'spoke') {
    // do I need to check if user have permissions?
    // what type of permissions?
    $wrapper->status->set($wrapper->field_pubstat->value());
  }

  // Inserting a new node @TODO: test work, add validation
  if ($node->type == 'spoke') {
    if (!isset($node->nid)) { // aof December 4, 2014
      $author_is_listed = FALSE;
      if (count($node->field_contributors[$node->language])) {
        foreach($node->field_contributors[$node->language] as $struct) {
          // author is already part of the list of contributors
          if ($node->uid == $struct['uid']) {
            $author_is_listed = TRUE;
            break;
          }
        }
      }
      if (!$author_is_listed) {
        if (!empty($node->field_contributors)) {
          array_unshift($node->field_contributors[$node->language], array('uid' => $node->uid));
        }
      }
    }
    if (!empty($node->field_contributors)) {
      foreach ($node->field_contributors[$node->language] as $contributor) {
        $queue = DrupalQueue::get('mediacommons_editorialworkflow_promote_user_worker');
        $queue->createItem($contributor += array('sponsor' => $node->uid));
      }
    }
  }
}

function mediacommons_editorialworkflow_form_hub_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $entity_owner = $form['#node']->name;
  $username = $user->name;
  if (isset($user->contribute['contributor']) || $entity_owner == $username) { // add entity_owner to "contributor"
    /** Add CSS and JS files */
	  //mediacommons_editorialworkflow_add_assets();
    $field = field_get_items('node', $form['#node'], 'field_type');
    if (isset($field[0])) {
      switch ($field[0]['value']) {
        case 0 :
          $form['#attributes']['class'][] = 'node-hub-type-video';
          break;
        case 1 :
          $form['#attributes']['class'][] = 'node-hub-type-image';
          break;
      }
	  }
  }
  // if the user is not the owner and not listed as a contributor in the node
  else {
    // node exist?
    if (isset($form['#node']->nid)) {
      if ($user->uid != 1) {
        // https://jira.nyu.edu/jira/browse/MC-249
        drupal_set_message(t('<strong>@title</strong> can only be changed by the managing editor of this site. Please contact that person to suggest changes.', array('@title' => $form['#node']->title)), 'warning');
        // 403 Forbidden
        // The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource.
        $url = url('user/' . $user->uid, array(), TRUE, 403);
        // Do we really want to do this? I need to clarify the story
        header('Location: ' . $url);
        drupal_exit($url);
      }
    }
  }
}

function mediacommons_editorialworkflow_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['#type'] = 'container';
  $form['options']['#title'] = '';
  $form['options']['status'] = array(
    '#type' => 'value',
    '#value' => 1
  );
}

function mediacommons_editorialworkflow_form_spoke_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  /** indication of that this form was process by the editorial workflow module */
  $form['#attributes']['class'][] = 'editorial-workflow';
  /** node exist */
  if (isset($form['#node']->nid)) {
    /** contributor is allow to edit node */
    if (isset($user->contribute['contributor'])) {
      $form['#attributes']['class'][] = $user->contribute['role'];
      // $message = t('Contributing as @contributor.', array('@contributor' => $user->contribute['role']));
    }
    /** user is not allow to edit node */
    else {
      $message = t('You are not allow to edit @title.', array('@title' => $user->contribute['current_title']));
    }
    if (isset($message)) {
      drupal_set_message($message, 'warning');
    }
  }
}

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_insert/7.x
 */
//function mediacommons_editorialworkflow_user_insert(&$edit, $account, $category) {}

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_update/7.x
 */
function mediacommons_editorialworkflow_user_update(&$edit, $account, $category) {
  //dpm(__FUNCTION__);
  //dpm($edit);
  //dpm($account);
  //dpm($category);
  //db_insert('user_changes')
  //  ->fields(array(
  //    'uid' => $account->uid,
  //    'changed' => time(),
  //  ))
  //  ->execute();
}

/**
 * https://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_presave/7.x
 */
function mediacommons_editorialworkflow_user_presave(&$edit, $account, $category) {
  // if ($account->is_new) { //Do things }
  // Make sure that our form value 'mymodule_foo' is stored as
  // 'mymodule_bar' in the 'data' (serialized) column.
  //if (isset($edit['mymodule_foo'])) {
    //$edit['data']['mymodule_bar'] = $edit['mymodule_foo'];
  //}
}

function mediacommons_editorialworkflow_userpath () {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $item = menu_get_item();
  $umbrella_url = mediacommons_homepage_umbrella_url();
  $umbrella =  $umbrella_url . '/' . implode('/', $item['original_map']);
  $http_response_code = 302;
  $url = url($umbrella, array('query' => array('project' => $project, 'destination' => implode('/', $item['original_map']))));
  header('Location: ' . $url, TRUE, $http_response_code);
  drupal_exit($url);
}

function mediacommons_editorialworkflow_menu_alter(&$items) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  foreach ($items as $path => $item) {
    preg_match('/(user)|(users)/', $path, $matches, PREG_OFFSET_CAPTURE);
    if ($matches) {
      switch ($path) {
        case 'users' :
        case 'user' :
        case 'user/login' :
        case 'user/register' :
        case 'user/password' :
        case 'user/reset/%/%/%' :
        case 'user/logout' :
        case 'user/%user' :
        case 'user/%user/view' :
        case 'user/%user/cancel' :
        case 'user/%user/cancel/confirm/%/%' :
        case 'user/%user/edit' :
        case 'user/%user/display' :
        case 'user/%user/devel' :
        case 'user/%user/devel/load' :
        case 'user/%user/devel/render' :
        case 'admin/people/permissions/roles/edit/%user_role' :
        case 'admin/people/permissions/roles/delete/%user_role' :
          $items[$path]['options']['alter'] = TRUE;
          $items[$path]['page callback'] = 'mediacommons_editorialworkflow_userpath';
          break;
      }
    }
    unset($matches);
  }
}

function mediacommons_editorialworkflow_link($item) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $umbrella_url = mediacommons_homepage_umbrella_url();
  preg_match('/(user)/', $item['path'], $matches, PREG_OFFSET_CAPTURE);
  if (!empty($matches)) {
    return '<a href="' . check_plain(url($umbrella_url . '/' . $item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
  else {
    return '<a href="' . check_plain(url($item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
}

function mediacommons_editorialworkflow_views_data_alter(&$data) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $data['users']['picture']['field']['handler'] = 'mediacommons_user_picture_handler';
}

/**
 * Make sure we are the last one running hook_menu_alter
 * If we don't do this; other modules (e.g., Views /users)
 * can alter our routes
 */
function mediacommons_editorialworkflow_module_implements_alter(&$module_list, $context){
  if ($context === 'menu_alter') {
    unset($module_list['mediacommons_editorialworkflow']);
    $module_list['mediacommons_editorialworkflow'] = '';
  }
}


function _mediacommons_editorialworkflow_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;
    // If a comment is being edited and previewed, the $account->uid is NULL.
    // @todo Remove when http://drupal.org/node/334826 is fixed in 6.x.
    if (!isset($account->uid)) {
      $account->uid = 0;
    }
    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();
    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array('name', 'mail', 'homepage', 'hostname'), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }
  if ($account->uid > 0) {
    $result = db_select('mediacommons_base_import_user_map', 'u')->fields('u', array('filename'))->condition('uid', $account->uid)->execute()->fetchField();
    if ($result && $result !== '0') {
      $umbrella_url = mediacommons_homepage_umbrella_url();
      $account->picture = (object) array();
      $account->picture->uri = $umbrella_url . '/sites/default/files/styles/profile_page_pic/public/pictures/' . $result;
    }
  }
  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }
  return $account;
}

/**
 * Override template_preprocess_user_picture() to display user pictures with
 * Gravatar integration.
 *
 * @see template_preprocess_user_picture()
 * @see _gravatar_load_account()
 * @see _gravatar_get_account_user_picture()
 */
function mediacommons_editorialworkflow_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    // Load the full user object since it is not provided with nodes, comments, or views displays.
    $account = _mediacommons_editorialworkflow_load_account($variables['account']);
    $filepath = _gravatar_get_account_user_picture($account);
    if (!empty($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      //if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        //$variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      //else {
      $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      if ($account->uid && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
      }
      elseif (!empty($account->homepage)) {
        // If user is anonymous, create link to the commenter's homepage.
        $attributes = array(
          'title' => t('View user website.'),
          'rel' => 'external nofollow',
        );
        $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array('attributes' => $attributes, 'html' => TRUE));
      }
    }
  }
}
