<?php

function mediacommons_editorialworkflow_theme_registry_alter(&$theme_registry) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $theme_registry['link']['function'] = 'mediacommons_editorialworkflow_link';
  // do we want to unset gravatar_preprocess_user_picture, we are taking over that function ... 
  $theme_registry['user_picture']['preprocess functions'][] = 'mediacommons_editorialworkflow_user_picture';
}

function _mediacommons_editorialworkflow_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;
    // If a comment is being edited and previewed, the $account->uid is NULL.
    // @todo Remove when http://drupal.org/node/334826 is fixed in 6.x.
    if (!isset($account->uid)) {
      $account->uid = 0;
    }
    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();
    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array('name', 'mail', 'homepage', 'hostname'), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }
  if ($account->uid > 0) {
    $result = db_select('mediacommons_base_import_user_map', 'u')->fields('u', array('filename'))->condition('uid', $account->uid)->execute()->fetchField();
    if ($result && $result !== '0') {
      $umbrella_url = mediacommons_homepage_umbrella_url();
      $account->picture = (object) array();
      $account->picture->uri = $umbrella_url . '/sites/default/files/styles/profile_page_pic/public/pictures/' . $result;
    }
  }
  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }
  return $account;
}

/**
 * Override template_preprocess_user_picture() to display user pictures with
 * Gravatar integration.
 *
 * @see template_preprocess_user_picture()
 * @see _gravatar_load_account()
 * @see _gravatar_get_account_user_picture()
 */
function mediacommons_editorialworkflow_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    // Load the full user object since it is not provided with nodes, comments, or views displays.
    $account = _mediacommons_editorialworkflow_load_account($variables['account']);
    $filepath = _gravatar_get_account_user_picture($account);
    if (!empty($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      //if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        //$variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      //else {
      $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      if ($account->uid && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
      }
      elseif (!empty($account->homepage)) {
        // If user is anonymous, create link to the commenter's homepage.
        $attributes = array(
          'title' => t('View user website.'),
          'rel' => 'external nofollow',
        );
        $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array('attributes' => $attributes, 'html' => TRUE));
      }

    }
  }
}

function mediacommons_editorialworkflow_init () {
  global $user;
  $path_is_admin = path_is_admin(current_path());
  if ($path_is_admin) {
    $menu_object = menu_get_object();
    $user->contribute = array(
      'hubs_can_contribute' => mediacommons_editorialworkflow_hubs_user_can_contribute(),
      'spokes_can_contribute' => mediacommons_editorialworkflow_contributor(),
    );
    if (isset( $menu_object)) {
      $user->contribute += array(
        'current_nid' => $menu_object->nid,
        'current_uid' => $menu_object->uid,
        'current_title' => $menu_object->title,
        'type' => $menu_object->type,
        'path_is_admin' => $path_is_admin,
      );

      /** primary author */
      if ($user->uid == $menu_object->uid) {
        $user->contribute += array(
          'contributor' => TRUE,
          'role' => 'primary author',
        );
      }
      /** admin, additional author or no privileges */
      else {
        /** Check if user is admin or an additional author **/
        if ( in_array( 'administrator', $user->roles ) ) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'administrator',
          );
        }
        else if (in_array($user->contribute['current_nid'], $user->contribute['spokes_can_contribute'])) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'additional author',
          );
        }
        else {
          $user->contribute += array(
            'contributor' => FALSE,
            'role' => 'no-privilege',
          );
        }
      }
    }
  }
}

/**
 * All things email
 */

/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 *
 * taken from: http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/email_example/email_example.module
 */
function mediacommons_editorialworkflow_mail($key, &$message, $params) {
  global $user;
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );
  switch ($key) {
    // Send a simple message from the contact form.
    case 'contributor':
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'MediaCommons Project')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name sent you the following message:', array('@name' => $user->name), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
      break;
  }
}

/**
 * Sends an e-mail.
 *
 * @param $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function mediacommons_editorialworkflow_mail_send($form_values) {

  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'mediacommons_editorialworkflow';

  // what action to takes
  $key = $form_values['key'];

  // Specify 'to' addresses.
  $to = $form_values['email'];

  // Specify 'from' addresses
  $from = $form_values['from'];

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = $form_values;

  // The language of the e-mail. This will one of three values:
  // * user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // * global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // * language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);

  if ($result['result'] == TRUE) {
    // watchdog($module, t('Email message has been sent to @contributor. Sender @sender', array('@contributor' => $to, '@sender' => $from)), WATCHDOG_INFO);
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    watchdog($module, t('There was a problem sending message.'), WATCHDOG_ERROR);
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
}

/**
 * Implementation of hook_perm().
 */
function mediacommons_editorialworkflow_permission() {
  return array(
    'access mediacommons content' => array(
      'title' => t('Access mediacommons content'),
      'description' => t('Access mediacommons content'),
    ),
    'contribute content spoke' => array(
      'title' => t('Contribute spoke'),
      'description' => t('Contribute spoke'),
    ),
    'contribute content hub' => array(
      'title' => t('Contribute hubs'),
      'description' => t('Contribute hubs'),
    ),
    'promote hub content' => array(
      'title' => t('Promote hubs'),
      'description' => t('Promote hubs'),
    ),
    'set current hub' => array(
      'title' => t('Set current hub'),
      'description' => t('Set current hub'),
    ),
    'set upcoming hub' => array(
      'title' => t('Set upcoming hub'),
      'description' => t('Set upcoming hub'),
    ),
    'admin contributors content' => array(
      'title' => t('Admin contributors content'),
      'description' => t('Admin contributors content'),
    ),
    'access mediacommons dashboard' => array(
      'title' => t('Access mediacommons dashboard'),
      'description' => t('Access mediacommons dashboard'),
    ),
    'promote users role' => array(
      'title' => t('Promote authenticaded user'),
      'description' => t('User is allow to promote authenticaded users to contributor role'),
    ),
  );
}

function mediacommons_editorialworkflow_menu() {
  $items['admin/contribute'] = array(
    'title' => t('Contribute'),
    'page callback' => 'mediacommons_editorialworkflow_contribute_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'weight' => 1,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/contribute/dashboard'] = array(
    'title' => t('Administrate site'),
    'description' => 'Manage users, set current hub and upcoming hubs.',
    'page callback' => 'mediacommons_editorialworkflow_admin_page',
    'page arguments' => array(1),
    'access arguments' => array('access dashboard'),
    'weight' => 3,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/contribute/dashboard/set-current-hub'] = array(
    'title' => 'Set current cluster',
    'description' => 'Set current hub, selected item will be displayed in the frontpage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacommons_editorialworkflow_set_current_hub'),
    'access arguments' => array('set current hub'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mediacommons_editorialworkflow.pages.inc',
  );
  return $items;
}

function mediacommons_editorialworkflow_contributor() {
	global $user;
	$field = field_info_instances('node');
	$mediacommons_editorialworkflow_contributor = &drupal_static(__FUNCTION__, array());
	/** If content-type HUB or SPOKE exist and field_contributors exist in any of the 2 types continue */
	if ((isset($field['hub']) && isset($field['hub']['field_contributors'])) || (isset($field['spoke']) && isset($field['spoke']['field_contributors']))) {
    $query = new EntityFieldQuery;
    $result = $query
              ->entityCondition('entity_type', 'node')
              ->fieldCondition('field_contributors', 'uid', $user->uid, '=')
              ->execute();
    if (isset($result['node'])) {
      $mediacommons_editorialworkflow_contributor = array_keys($result['node']);
    }
	}
  return $mediacommons_editorialworkflow_contributor;
}

function mediacommons_editorialworkflow_hubs_user_can_contribute() {
  global $user;
	$field = field_info_instances('node');
  $hubs_user_can_contribute = &drupal_static(__FUNCTION__, array());
	/** If content-type HUB or SPOKE exist and field_contributors exist in any of the 2 types continue */
	if ((isset($field['hub']) && isset($field['hub']['field_contributors']))) {
    $query = new EntityFieldQuery;
    $result = $query
                ->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'hub')
                ->fieldCondition('field_contributors', 'uid', $user->uid, '=')
                ->execute();
    if (isset($result['node'])) {
      $hubs_user_can_contribute = array_keys($result['node']);
    }
  }
  return $hubs_user_can_contribute;
}

function mediacommons_editorialworkflow_preprocess_button(&$variables) {
  global $user;
  if (isset($user->contribute)) {
    $element = &$variables['element'];
    // disable submit button
    if (
    		1 == 2 &&
        $element['#type'] == 'submit' /** submit buttons */
        &&
        isset( $user->contribute['current_nid'] ) /** is a node */
        &&
        $user->uid != $user->contribute['current_uid'] /** not the primary contributor */
    		&& ! in_array('administrator', $user->roles) /** not an administrator */
    ) {
    	if ( ! in_array ( $user->contribute['current_nid'], $user->contribute['spokes_can_contribute'] ) /** not a additional contributor */ ) {
       $element['#attributes'] = array(
          'disabled' => 'disabled',
          'class' => array('no-contributor-permission element-invisible')
       );
      }
    }
    if (isset($element['#value']) && isset($element['#name'])) {
      switch ($element['#name']) {
        case 'field_contributed_piece_add_more' :
          $element['#value'] = t('Add another spoke');
          break;
        case 'field_contributors_add_more' :
          $element['#value'] = t('Add another contributor');
          break;
        case 'field_clusters_add_more' :
          $element['#value'] = t('Add another hub');
          break;
      }
    }
  }
}

function mediacommons_editorialworkflow_preprocess_container(&$variables) {
  global $user;
  if (isset($user->contribute)) {
    $element = &$variables['element'];
    if (isset($element['#id'])) {
      switch ($element['#id']) {
        case 'edit-field-mbed' :
        case 'edit-field-representative-image' :
          $element['#attributes']['class'][] = 'invisible-element';
          break;
      }
    }
  }
}

function mediacommons_editorialworkflow_preprocess_textfield(&$variables) {
  $element = &$variables['element'];
  if ($element['#name'] == 'title') {
    $element['#attributes']['placeholder'] = t('Untitled');
  }
}

function mediacommons_editorialworkflow_preprocess_checkbox(&$variables) {

  global $user;

  /**
   * User is coming with a is_contributor flag; the flag is the nid (int)
   * of a known hub.
   */
  $is_contributor_flag = isset($_GET['is_contributor']) ? (int)$_GET['is_contributor'] : 0;

  if (
    isset($user->contribute)
    && !in_array('administrator', $user->roles)
  ) {

    $element = &$variables['element'];

    if (
      isset($element['#parents']) // check if is set
      && isset($element['#parents'][0]) // has parent
      && $element['#parents'][0] == 'field_part_of' // is a reference to a hub
    ) {
      /** user have permission to add piece to this cluster */
      if (isset($element['#return_value']) ) {

        if (!in_array($element['#return_value'], $user->contribute['hubs_can_contribute'])) {
          $element['#attributes'] = array(
            'disabled' => 'disabled',
            'class' => array('no-contributor-permission')
          );
        }
        elseif ($element['#return_value'] == $is_contributor_flag) {
          $element['#attributes'] = array(
            'checked' => 'checked',
            'class' => array('set-as-contribute-pieces')
          );
        }
      }


      /** if is already checked and user is not the cluster manager; disable the field and mark as read-only */
      if ($element['#checked']) {
        $element['#attributes'] = array(
          'disabled' => 'disabled',
          'class' => array('disabled')
        );
      }
    }
  }
}

function mediacommons_editorialworkflow_node_presave($node) {
  // Inserting a new node @TODO: test work, add validation
  if ($node->type == 'spoke') {
    if ( !isset( $node->nid ) ) { // aof December 4, 2014
      $author_is_listed = FALSE;
      if (count($node->field_contributors[$node->language])) {
        foreach($node->field_contributors[$node->language] as $struct) {
          // author is already part of the list of contributors
          if ($node->uid == $struct['uid']) {
            $author_is_listed = TRUE;
            break;
          }
        }
      }
      if (!$author_is_listed) {
        if (!empty($node->field_contributors)) {
          array_unshift($node->field_contributors[$node->language], array('uid' => $node->uid));
        }
      }
    }
    if (!empty($node->field_contributors)) {
      foreach ($node->field_contributors[$node->language] as $contributor) {
        $queue = DrupalQueue::get('mediacommons_editorialworkflow_promote_user_worker');
        $queue->createItem($contributor += array('sponsor' => $node->uid));
      }
    }
  }
}

function mediacommons_editorialworkflow_add_assets() {
	$module_path = drupal_get_path('module', 'mediacommons_editorialworkflow');
  drupal_add_css($module_path . '/mediacommons_editorialworkflow.css', 'module');
  drupal_add_js($module_path . '/js/mediacommons_editorialworkflow.js', array('type' => 'file', 'group' => JS_DEFAULT,));
}

function mediacommons_editorialworkflow_form_hub_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  $node_exist = false;

  // node exist
  if (isset($form['#node']->nid)) {
    $node_exist = true;
  }

  if (isset($user->contribute['contributor'])) {

    /** Add CSS and JS files */
	  mediacommons_editorialworkflow_add_assets();

		drupal_set_message(t('Contributing as @contributor.', array('@contributor' => $user->contribute['role'])), 'status');

    $field = field_get_items('node', $form['#node'], 'field_type');

    if (isset($field[0])) {
      switch ($field[0]['value']) {
        case 0 :
          $form['#attributes']['class'][] = 'node-hub-type-video';
          break;

        case 1 :
          $form['#attributes']['class'][] = 'node-hub-type-image';
          break;
      }
	  }
    else {
      if ($node_exist) {
        drupal_set_message(t('You are not allow to edit @title. If you are the editor of this hub ask the managing editor to add you as an editor.', array('@title' => $user->contribute['current_title'])), 'warning');
      }
    }
  }

}

function mediacommons_editorialworkflow_form_spoke_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  /** add editorial workflow assest */
  mediacommons_editorialworkflow_add_assets();

  /** indication of that this form was process by the editorial workflow module */
  $form['#attributes']['class'][] = 'editorial-workflow';

  /** node exist */
  if (isset($form['#node']->nid)) {
    /** contributor is allow to edit node */
    if (isset($user->contribute['contributor'])) {
      $form['#attributes']['class'][] = $user->contribute['role'];
      $message = t('Contributing as @contributor.', array('@contributor' => $user->contribute['role']));
    }
    /** user is not allow to edit node */
    else {
      $message = t('You are not allow to edit @title. If you are a contributor to this piece ask the primary author to add you as an additional author.', array('@title' => $user->contribute['current_title']));
    }
    /** set message */
    drupal_set_message($message, 'warning');
  }

  /** New spoke */
  else {}

}

/*
 * Implements hook_cron().
 */
//function mediacommons_editorialworkflow_cron() {}

/**
 * All things queue
 */

 /*
  * Implementation of hook_cron_queue_info()
  * http://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_cron_queue_info/7
  */

function mediacommons_editorialworkflow_cron_queue_info() {
  $queues['mediacommons_editorialworkflow_promote_user_worker'] = array(
    'worker callback' => 'mediacommons_editorialworkflow_promote_user',
    'time' => 60,
  );
  return $queues;
}

/**
 * Promote user worker (callback); add contributor role to authenticated user
 * @param array $data
 *   User ID (uid) to be associated with task. e.g., array('uid' => 2)
 */
function mediacommons_editorialworkflow_promote_user($data) {
	if (
	  isset($data['uid']) // we have a user account ID
	  && $data['uid'] != 1 // no need to proceed if user 1
	  && isset($data['sponsor']) // we have a sponsor ID
  )
	{

		$uid = $data['uid'];
		$sid = $data['sponsor'];
	  $account_roles = array();

    try {

      // load sponsor account
      $sponsor = user_load($sid);

			// sponsor is allow to promote users role
			if (user_access('promote users role', $sponsor)) {

        // load user account
        $account = user_load($uid);

        if (
          !in_array('contributor', $account->roles) // user is already a contributor?
          && (
            !in_array('administrator', $account->roles) // if user is an administrator we don't need to add him the contributor roles
            && !in_array('editor', $account->roles) // if user is an editor we don't need to add him the contributor roles
          )
        ) {

      	  // user is not a contributor; find role index and assign it to user
          $account_roles['roles'] = $account->roles;
          $account_roles['roles'][array_search('contributor', user_roles(TRUE))] = 'contributor';

          user_save($account, $account_roles);

				  // log task
				  watchdog('mediacommons_editorialworkflow', 'User @user was promoted to contributor by @sponsor.', array('@user' => $account->name, '@sponsor' => $sponsor->name), WATCHDOG_NOTICE);

				  // send notifications
          mediacommons_editorialworkflow_mail_send(
            array(
              'email' => $account->mail,
              'from' => $sponsor->mail,
              'key' => 'contributor_promoted',
            )
          );
        }
      }
    }
    catch (Exception $e) {
      drupal_set_essage($e->getMessage(), 'error');
    }
  }
}

// https://api.drupal.org/api/drupal/includes!theme.inc/function/theme_username/7.x
// https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu_alter/7.x
// https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_get_item_alter/7.x

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_insert/7.x
 */
//function mediacommons_editorialworkflow_user_insert(&$edit, $account, $category) {}

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_update/7.x
 */
function mediacommons_editorialworkflow_user_update(&$edit, $account, $category) {
  //dpm(__FUNCTION__);
  //dpm($edit);
  //dpm($account);
  //dpm($category);
  //db_insert('user_changes')
  //  ->fields(array(
  //    'uid' => $account->uid,
  //    'changed' => time(),
  //  ))
  //  ->execute();
}

/**
 * https://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_presave/7.x
 */
function mediacommons_editorialworkflow_user_presave(&$edit, $account, $category) {
  // if ($account->is_new) { //Do things }
  // Make sure that our form value 'mymodule_foo' is stored as
  // 'mymodule_bar' in the 'data' (serialized) column.
  //if (isset($edit['mymodule_foo'])) {
    //$edit['data']['mymodule_bar'] = $edit['mymodule_foo'];
  //}
}

function mediacommons_editorialworkflow_userpath() {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $item = menu_get_item();
  $umbrella_url = mediacommons_homepage_umbrella_url();
  $umbrella =  $umbrella_url . '/' . implode('/', $item['original_map']);
  $http_response_code = 302;
  $url = url($umbrella, array('query' => array('project' => $project, 'destination' => implode('/', $item['original_map']))));
  header('Location: ' . $url, TRUE, $http_response_code);
  drupal_exit($url);
}

function mediacommons_editorialworkflow_menu_alter(&$items) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  foreach ($items as $path => $item) {
    preg_match('/(user)|(users)/', $path, $matches, PREG_OFFSET_CAPTURE);
    if ($matches) {
      switch ($path) {
        case 'users' :
        case 'user' :
        case 'user/login' :
        case 'user/register' :
        case 'user/password' :
        case 'user/reset/%/%/%' :
        case 'user/logout' :
        case 'user/%user' :
        case 'user/%user/view' :
        case 'user/%user/cancel' :
        case 'user/%user/cancel/confirm/%/%' :
        case 'user/%user/edit' :
        case 'user/%user/display' :
        case 'user/%user/devel' :
        case 'user/%user/devel/load' :
        case 'user/%user/devel/render' :
        case 'admin/people/permissions/roles/edit/%user_role' :
        case 'admin/people/permissions/roles/delete/%user_role' :
          $items[$path]['options']['alter'] = TRUE;
          $items[$path]['page callback'] = 'mediacommons_editorialworkflow_userpath';
          break;
      }
    }
    unset($matches);
  }
}

function mediacommons_editorialworkflow_link($item) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $umbrella_url = mediacommons_homepage_umbrella_url();
  preg_match('/(user)/', $item['path'], $matches, PREG_OFFSET_CAPTURE);
  if (!empty($matches)) {
    return '<a href="' . check_plain(url($umbrella_url . '/' . $item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
  else {
    return '<a href="' . check_plain(url($item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
}

function mediacommons_editorialworkflow_views_data_alter(&$data) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $data['users']['picture']['field']['handler'] = 'mediacommons_user_picture_handler';
}

/**
 * Make sure we are the last one running hook_menu_alter
 * If we don't do this; other modules (e.g., Views /users)
 * can alter our routes
 */
function mediacommons_editorialworkflow_module_implements_alter(&$module_list, $context){
  if ($context === 'menu_alter') {
    unset($module_list['mediacommons_editorialworkflow']);
    $module_list['mediacommons_editorialworkflow'] = '';
  } 
}

