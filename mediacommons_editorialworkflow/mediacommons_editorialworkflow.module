<?php

module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.theme');
module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.datasource');
module_load_include('inc', 'mediacommons_editorialworkflow', 'inc/mediacommons_editorialworkflow.queue');

/**
 * Implements hook_views_api().
 */
function mediacommons_editorialworkflow_views_api () {
  return array(
    'api' => '3.0',
  );
}

function mediacommons_editorialworkflow_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $attributes = array(
      'project=' . variable_get('mediacommons_project', 'mediacommons'),
      'source=' . url(current_path(), array('absolute' => true)),
      'redirect=contributor',
    );
    $form['name']['#attributes'] = $attributes;
    $form['#action'] = $form['#action'] . '?' . implode('&', $attributes);
  }
}

/**
 * Implements hook_user_login().
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_login/7.x
 */
function mediacommons_editorialworkflow_user_login(&$edit, $account) {
  $redirection = null;
  $parameters = drupal_get_query_parameters();
  // I need to check from where the user "hail from" e.g., if user is trying to write 
  // a comment redirect to the original post after login.  
  if (isset($parameters['redirect'])) {
    $redirection = $parameters['redirect'];
  }
  // if $redirection is set and the user is not trying to reset his password, 
  // we redirect to $redirection.
  if (
    !is_null($redirection) 
    && 
    (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset'))
  {
    $_GET['destination'] = $redirection;
    $edit['redirect'] = $redirection;
  }
}

/**
 * Implements hook_views_default_views().
 */
function mediacommons_editorialworkflow_views_default_views () {
  $views = array();
  $files = file_scan_directory(drupal_get_path('module', 'mediacommons_editorialworkflow') . '/views', '/\.inc/');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
      unset($view);
    }
  }
  return $views;
}

function mediacommons_editorialworkflow_custom_theme() {
  if (arg(0) == 'contributor') {
    return 'mediacommons_admin';
  }
}

function mediacommons_editorialworkflow_init () {
  return;
  global $user;
  $path_is_admin = path_is_admin(current_path());
  if ($path_is_admin) {
    $menu_object = menu_get_object();
    $user->contribute = array(
      'hubs_can_contribute' => mediacommons_editorialworkflow_hubs_user_can_contribute(),
      'spokes_can_contribute' => mediacommons_editorialworkflow_contributor(),
    );
    if (isset( $menu_object)) {
      $user->contribute += array(
        'current_nid' => $menu_object->nid,
        'current_uid' => $menu_object->uid,
        'current_title' => $menu_object->title,
        'type' => $menu_object->type,
        'path_is_admin' => $path_is_admin,
      );
      /** primary author */
      if ($user->uid == $menu_object->uid) {
        $user->contribute += array(
          'contributor' => TRUE,
          'role' => 'primary author',
        );
      }
      /** admin, additional author or no privileges */
      else {
        /** Check if user is admin or an additional author **/
        if ( in_array( 'administrator', $user->roles ) ) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'administrator',
          );
        }
        else if (in_array($user->contribute['current_nid'], $user->contribute['spokes_can_contribute'])) {
          $user->contribute += array(
            'contributor' => TRUE,
            'role' => 'additional author',
          );
        }
        else {
          $user->contribute += array(
            'contributor' => FALSE,
            'role' => 'no-privilege',
          );
        }
      }
    }
  }
}

function mediacommons_editorialworkflow_menu() {
  $items = array();
  $items['contributor'] = array(
    'title' => 'Dashboard',
    'description' => 'User dashboard',
    'page callback' => 'mediacommons_editorialworkflow_contributor_dashboard',
    'access arguments' => array('access mediacommons dashboard'),
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
    'type' =>  MENU_NORMAL_ITEM,
  );
  $items['contributor/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'User dashboard',
    'page callback' => 'mediacommons_editorialworkflow_contributor_dashboard',
    'access arguments' => array('access mediacommons dashboard'),
    'weight' => 7,
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
    'type' =>  MENU_DEFAULT_LOCAL_TASK,
  );
  $items['contributor/add'] = array(
    'title' => 'Create content',
    'page callback' => 'mediacommons_editorialworkflow_contributor_dashboard_create_content',
    'description' => 'Create content',
    'access arguments' => array('access mediacommons dashboard'),
    'weight' => 8,
    'file' => 'inc/mediacommons_editorialworkflow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['contributor/profile'] = array(
    'title' => 'Profile',
    'page callback' => '_mediacommons_editorialworkflow_redirect_url_profile',
    'access callback' => 'user_is_logged_in',
    'access arguments' => array('access mediacommons dashboard'),
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Redirects user to defined page.
 */
function _mediacommons_editorialworkflow_redirect_url () {
  drupal_goto('user/logout');
}

function _mediacommons_editorialworkflow_redirect_url_profile () {
  
  $project = variable_get('mediacommons_project', 'mediacommons');
  
  if ($project === 'mediacommons') return;
  
  $item = menu_get_item();

  $params = implode(',', drupal_get_query_parameters());

  $original = implode('/', $item['original_map']);
  
  $args = implode(',', arg());
  
  $destination = url(current_path(), array('absolute' => true));
  
  $query = array(
    'query' => array(
      'project' => $project, 
      'destination' => $destination,
      'args' => $args,
      'original' => $original,
      'params' => $params,
    ),
  );
  
  $url = url(implode('/', array(mediacommons_homepage_umbrella_url(), 'user')), $query);
  
  header('Location: ' . $url, TRUE, 302);

}

/**
 * Implementation of hook_perm().
 */
function mediacommons_editorialworkflow_permission () {
  return array(
    'access mediacommons content' => array(
      'title' => t('Access mediacommons content'),
      'description' => t('Access mediacommons content'),
    ),
    'contribute content spoke' => array(
      'title' => t('Contribute spoke'),
      'description' => t('Contribute spoke'),
    ),
    'contribute content hub' => array(
      'title' => t('Contribute hubs'),
      'description' => t('Contribute hubs'),
    ),
    'promote hub content' => array(
      'title' => t('Promote hubs'),
      'description' => t('Promote hubs'),
    ),
    'set current hub' => array(
      'title' => t('Set current hub'),
      'description' => t('Set current hub'),
    ),
    'set upcoming hub' => array(
      'title' => t('Set upcoming hub'),
      'description' => t('Set upcoming hub'),
    ),
    'admin contributors content' => array(
      'title' => t('Admin contributors content'),
      'description' => t('Admin contributors content'),
    ),
    'access mediacommons dashboard' => array(
      'title' => t('Access mediacommons dashboard'),
      'description' => t('Access mediacommons dashboard'),
    ),
    'promote users role' => array(
      'title' => t('Promote authenticaded user'),
      'description' => t('User is allow to promote authenticaded users to contributor role'),
    ),
    'publish content' => array(
      'title' => t('Publish content'),
      'description' => t('User is allow to publish content'),
    ),
  );
}

function mediacommons_editorialworkflow_node_presave($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // https://jira.nyu.edu/jira/browse/MC-250
  if ($node->type == 'hub' || $node->type == 'spoke') {
    // do I need to check if user have permissions?
    // what type of permissions?
    $wrapper->status->set($wrapper->field_pubstat->value());
  }
  // Inserting a new node @TODO: test work, add validation
  if ($node->type == 'spoke') {
    if (!isset($node->nid)) { // aof December 4, 2014 ? I was checking for new? Why not $node->is_new?
      $author_is_listed = FALSE;
      if (count($node->field_contributors[$node->language])) {
        foreach($node->field_contributors[$node->language] as $struct) {
          // author is already part of the list of contributors
          if ($node->uid == $struct['uid']) {
            $author_is_listed = TRUE;
            break;
          }
        }
      }
      if (!$author_is_listed) {
        if (!empty($node->field_contributors)) {
          array_unshift($node->field_contributors[$node->language], array('uid' => $node->uid));
        }
      }
    }
    if (!empty($node->field_contributors)) {
      foreach ($node->field_contributors[$node->language] as $contributor) {
        $queue = DrupalQueue::get('mediacommons_editorialworkflow_promote_user_worker');
        $queue->createItem($contributor += array('sponsor' => $node->uid));
      }
    }
  }
  // Inserting a new node @TODO: test work, add validation
  if ($node->type == 'hub') {
    if (!isset($node->nid)) { // aof December 4, 2014
      $author_is_listed = FALSE;
      if (count($node->field_contributors[$node->language])) {
        foreach($node->field_contributors[$node->language] as $struct) {
          // author is already part of the list of contributors
          if ($node->uid == $struct['uid']) {
            $author_is_listed = TRUE;
            break;
          }
        }
      }
      if (!$author_is_listed) {
        if (!empty($node->field_contributors)) {
          array_unshift($node->field_contributors[$node->language], array('uid' => $node->uid));
        }
      }
    }
    if (!empty($node->field_contributors)) {
      foreach ($node->field_contributors[$node->language] as $contributor) {
        $queue = DrupalQueue::get('mediacommons_editorialworkflow_promote_user_worker');
        $queue->createItem($contributor += array('sponsor' => $node->uid));
      }
    }
  }
}

/**
 * Remove the option to select a text format in the edit form
 */
function mediacommons_editorialworkflow_remove_text_format_option (&$form) {
  $form[LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['format']['#access'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['help']['#access'] = FALSE;
  $form[LANGUAGE_NONE][0]['format']['#theme_wrappers'] = NULL;
  return $form; 
}

function mediacommons_editorialworkflow_form_page_node_form_alter (&$form, &$form_state, $form_id) {
  $form['body']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';
}

function mediacommons_editorialworkflow_form_review_node_form_alter (&$form, &$form_state, $form_id) {
  $form['body']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';
}

function mediacommons_editorialworkflow_form_page_front_page_post_form_alter (&$form, &$form_state, $form_id) {
  $form['field_body']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';
}

function is_contributor() {
  $role = user_role_load_by_name('contributor');
  if (user_has_role($role->rid)) {
    return TRUE;
  }
  return FALSE;
}

function mediacommons_editorialworkflow_form_hub_node_form_alter (&$form, &$form_state, $form_id) {
  
  global $user;
  
  $is_contributor = is_contributor();

  $user_can_edit = mediacommons_editorialworkflow_user_can_edit_node($form['#node']);

  $form['field_body']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';
  
  $form['field_image_rights']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';  
  
  if ($is_contributor) {
    $form['field_contributors'][$form['language']['#value']][0]['uid']['#default_value'] = $user->uid;
  }
  
  $path = (isset($form['#node']->nid)) ? url(drupal_get_path_alias('node/' . $form['#node']->nid)) : NULL;

  $settings = array(
    'mediacommons_editorialworkflow' => array(
      'isAdminPage' => TRUE,
      'redirect' => array(
        'path' => $path, 'trigger' => FALSE,
      ),
    ),
  );
  

  if (!$user_can_edit) {
    // add a class so that we can style the form
    $form['#attributes']['class'][] = 'user-cant-contribute';
    // if the user is not the owner and not listed as a contributor in the node
    drupal_set_message(t('<strong>@title</strong> can only be changed by the managing editor of this site. Please contact that person to suggest changes. Redirecting in <em><span class="redirect">5</span></em> seconds.', array('@title' => $form['#node']->title)), 'warning');
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['preview_changes']['#access'] = FALSE;
    $settings['mediacommons_editorialworkflow']['redirect']['trigger'] = TRUE;
  }
  else {
    if (!isset($form['#node']->nid)) {
      
    }
  }
  drupal_add_js($settings, 'setting');
}

function mediacommons_editorialworkflow_node_view($node, $view_mode, $langcode) {}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mediacommons_editorialworkflow_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $user_can_edit = false;
  $type = null;
	foreach ($router_item["map"] as $map) {
		if (!isset($map->type)) continue;
		if ($map->type == 'hub' || $map->type == 'spoke') {
			$type = $map->type;
			break;
		}
	}
	if ($type == null) return;
  $page_arguments = $router_item['page_arguments'];
  if (count($page_arguments) === 1) {
    $user_can_edit = mediacommons_editorialworkflow_user_can_edit_node($page_arguments[0]);
  }
  if (!$user_can_edit) {
	  foreach ($data['tabs'][0]['output'] as $key => $value) {
      if ($value['#link']['path'] == 'node/%/edit') {
			  unset($data['tabs'][0]['output'][$key]);
		  }
    }
	}
}

function mediacommons_editorialworkflow_user_can_edit_node ($node) {

  global $user;
  
  if (!user_is_logged_in()) return false;

  if ($user->uid == 1) return true;

  $username = $user->name;

  // logged user is the same as the author of the entity?
  if ($node->name == $username) return TRUE;

  $wrapper = entity_metadata_wrapper('node', $node);

  $role_administrator = user_role_load_by_name('administrator');

  $role_managing_editor = user_role_load_by_name('managing editor');

  if (user_has_role($role_managing_editor->rid)) return TRUE;

  if (user_has_role($role_administrator->rid)) return TRUE;

  foreach ($wrapper->field_contributors->value() as $delta => $contributor) {
    if ($contributor->name == $username) return TRUE;
  }

  foreach ($wrapper->field_curators_editors->value() as $delta => $curators_editors) {
    if ($curators_editors->name == $username) return TRUE;
  }

  foreach ($wrapper->field_co_editor->value() as $delta => $field_co_editor) {
    if ($field_co_editor->name == $username) return TRUE;
  }

  return false;

}

function mediacommons_editorialworkflow_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  /** indication of that this form was process by the editorial workflow module */
  $form['#attributes']['class'][] = 'editorial-workflow';
  foreach ($user->roles as $role) {
    $form['#attributes']['class'][] = 'editorial-workflow-' . str_replace(' ', '-', $role);
  }
  $form['options']['#type'] = 'container';
  $form['options']['#title'] = '';
  $form['options']['status'] = array(
    '#type' => 'value',
    '#value' => 1
  );
}

function mediacommons_editorialworkflow_form_spoke_node_form_alter(&$form, &$form_state, $form_id) {

  $form['field_body']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';
  
  $form['field_embed']['#after_build'][] = 'mediacommons_editorialworkflow_remove_text_format_option';

  /** node exist */
  if (!isset($form['#node']->nid)) return;
  $path = (isset($form['#node']->nid)) ? url(drupal_get_path_alias('node/' . $form['#node']->nid)) : NULL;
  $settings = array(
    'mediacommons_editorialworkflow' => array(
      'isAdminPage' => TRUE,
      'redirect' => array(
        'path' => $path, 'trigger' => FALSE,
      ),
    ),
  );
  $user_can_edit = mediacommons_editorialworkflow_user_can_edit_node($form['#node']);
  if (!$user_can_edit) {
    // add a class so that we can style the form
    $form['#attributes']['class'][] = 'user-cant-contribute';
    // if the user is not the owner and not listed as a contributor in the node
    drupal_set_message(t('<strong>@title</strong> can only be changed by the managing editor of this site. Please contact that person to suggest changes. Redirecting in <em><span class="redirect">5</span></em> seconds.', array('@title' => $form['#node']->title)), 'warning');
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['preview_changes']['#access'] = FALSE;
    $settings['mediacommons_editorialworkflow']['redirect']['trigger'] = TRUE;
  }
  drupal_add_js($settings, 'setting');
}

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_insert/7.x
 */
//function mediacommons_editorialworkflow_user_insert(&$edit, $account, $category) {}

/**
 * https://api.drupal.org/api/drupal/modules%21user%21user.api.php/function/hook_user_update/7.x
 */
//function mediacommons_editorialworkflow_user_update(&$edit, $account, $category) {}

/**
 * https://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_presave/7.x
 */
//function mediacommons_editorialworkflow_user_presave(&$edit, $account, $category) {}

function mediacommons_editorialworkflow_userpath () {

  $project = variable_get('mediacommons_project', 'mediacommons');
  
  if ($project === 'mediacommons') return;
  
  $item = menu_get_item();
  
  $umbrella_url = mediacommons_homepage_umbrella_url();
  
  $umbrella =  $umbrella_url . '/' . implode('/', $item['original_map']);
  
  $http_response_code = 302;

  $original = implode('/', $item['original_map']);
  
  $destination = url(current_path(), array('absolute' => true));

  $dashboard = url(base_path() . 'contributor', array('absolute' => true));

  $query = array(
    'query' => array(
      'project' => $project, 
      'destination' => $destination,
      'dashboard' => $dashboard,
      'original' => $original,
    ),
    'absolute' => true,
  );
  
  $url = url(implode('/', array(mediacommons_homepage_umbrella_url(), 'user')), $query);

  header('Location: ' . $url, TRUE, $http_response_code);

}

function mediacommons_editorialworkflow_menu_alter(&$items) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  foreach ($items as $path => $item) {
    preg_match('/(user)|(users)/', $path, $matches, PREG_OFFSET_CAPTURE);
    if ($matches) {
      switch ($path) {
        case 'users' :
        case 'user' :
        case 'user/login' :
        case 'user/register' :
        case 'user/password' :
        case 'user/reset/%/%/%' :
        case 'user/logout' :
        case 'user/%user' :
        case 'user/%user/view' :
        case 'user/%user/cancel' :
        case 'user/%user/cancel/confirm/%/%' :
        case 'user/%user/edit' :
        case 'user/%user/display' :
        case 'user/%user/devel' :
        case 'user/%user/devel/load' :
        case 'user/%user/devel/render' :
        case 'admin/people/permissions/roles/edit/%user_role' :
        case 'admin/people/permissions/roles/delete/%user_role' :
          $items[$path]['options']['alter'] = TRUE;
          $items[$path]['page callback'] = 'mediacommons_editorialworkflow_userpath';
          break;
      }
    }
    unset($matches);
  }
}

function mediacommons_editorialworkflow_link($item) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $umbrella_url = mediacommons_homepage_umbrella_url();
  preg_match('/(user)/', $item['path'], $matches, PREG_OFFSET_CAPTURE);
  if (!empty($matches)) {
    return '<a href="' . check_plain(url($umbrella_url . '/' . $item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
  else {
    return '<a href="' . check_plain(url($item['path'], $item['options'])) . '"' . drupal_attributes($item['options']['attributes']) . '>' . ($item['options']['html'] ? $item['text'] : check_plain($item['text'])) . '</a>';
  }
}

function mediacommons_editorialworkflow_views_data_alter(&$data) {
  $project = variable_get('mediacommons_project', 'mediacommons');
  if ($project === 'mediacommons') return;
  $data['users']['picture']['field']['handler'] = 'mediacommons_user_picture_handler';
}

/**
 * Make sure we are the last one running hook_menu_alter
 * If we don't do this; other modules (e.g., Views /users)
 * can alter our routes
 */
function mediacommons_editorialworkflow_module_implements_alter(&$module_list, $context){
  if ($context === 'menu_alter') {
    unset($module_list['mediacommons_editorialworkflow']);
    $module_list['mediacommons_editorialworkflow'] = '';
  }
}

function _mediacommons_editorialworkflow_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;
    // If a comment is being edited and previewed, the $account->uid is NULL.
    // @todo Remove when http://drupal.org/node/334826 is fixed in 6.x.
    if (!isset($account->uid)) {
      $account->uid = 0;
    }
    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();
    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array('name', 'mail', 'homepage', 'hostname'), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }
  if ($account->uid > 0) {
    $result = db_select('mediacommons_base_import_user_map', 'u')->fields('u', array('filename'))->condition('uid', $account->uid)->execute()->fetchField();
    if ($result && $result !== '0') {
      $umbrella_url = mediacommons_homepage_umbrella_url();
      $account->picture = (object) array();
      $account->picture->uri = $umbrella_url . '/sites/default/files/styles/profile_page_pic/public/pictures/' . $result;
    }
  }
  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }
  return $account;
}

/**
 * Override template_preprocess_user_picture() to display user pictures with
 * Gravatar integration.
 *
 * @see template_preprocess_user_picture()
 * @see _gravatar_load_account()
 * @see _gravatar_get_account_user_picture()
 */
function mediacommons_editorialworkflow_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    // Load the full user object since it is not provided with nodes, comments, or views displays.
    $account = _mediacommons_editorialworkflow_load_account($variables['account']);
    $filepath = _gravatar_get_account_user_picture($account);
    if (!empty($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      //if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        //$variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      //else {
      $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      //}
      if ($account->uid && user_access('access user profiles')) {
        // Create link to the user's profile.
        $attributes = array('title' => t('View user profile.'));
        $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
      }
      elseif (!empty($account->homepage)) {
        // If user is anonymous, create link to the commenter's homepage.
        $attributes = array(
          'title' => t('View user website.'),
          'rel' => 'external nofollow',
        );
        $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array('attributes' => $attributes, 'html' => TRUE));
      }
    }
  }
}

/**
 * Add to the administration menu content before it is rendered.
 *
 * Only use this hook to add new data to the menu structure. Use
 * hook_admin_menu_output_alter() to *alter* existing data.
 *
 * @param array $content
 *   A structured array suitable for drupal_render(), potentially containing:
 *   - menu: The administrative menu of links below the path 'admin/*'.
 *   - icon: The icon menu.
 *   - account: The user account name and log out link.
 *   - users: The user counter.
 *   Additionally, these special properties:
 *   - #components: The actual components contained in $content are configurable
 *     and depend on the 'admin_menu_components' configuration value. #components
 *     holds a copy of that for convenience.
 *   - #complete: A Boolean indicating whether the complete menu should be built,
 *     ignoring the current configuration in #components.
 *   Passed by reference.
 *
 * @see hook_admin_menu_output_alter()
 * @see admin_menu_links_menu()
 * @see admin_menu_links_icon()
 * @see admin_menu_links_user()
 * @see theme_admin_menu_links()
 */
function mediacommons_editorialworkflow_admin_menu_output_build(&$content) {
  // In case your implementation provides a configurable component, check
  // whether the component should be displayed:
  //if (empty($content['#components']['shortcut.links']) && !$content['#complete']) {
    //return;
  //}
  // Add new top-level item to the menu.
  if (isset($content['menu'])) {
    $content['menu']['home'] = array(
      '#title' => t('Home'),
      // #attributes are used for list items (LI).
      '#attributes' => array('class' => array('mediacommons-editorialworkflow-front')),
      '#href' => '<front>',
      // #options are passed to l().
      '#options' => array(
        // Apply a class on the link (anchor).
        'attributes' => array('class' => array('mediacommons-editorialworkflow-front-link-anchor')),
      ),
      // #weight controls the order of links in the resulting item list.
      '#weight' => -200,
    );
    $content['menu']['dashboard'] = array(
      '#title' => t('Dashboard'),
      // #attributes are used for list items (LI).
      '#attributes' => array('class' => array('mediacommons-editorialworkflow-dashboard')),
      '#href' => 'contributor',
      // #options are passed to l().
      '#options' => array(
        'query' => drupal_get_destination(),
        // Apply a class on the link (anchor).
        'attributes' => array('class' => array('mediacommons-editorialworkflow-dashboard-link-anchor')),
      ),
      // #weight controls the order of links in the resulting item list.
      '#weight' => -199,
    );
    $content['menu']['dashboard']['create'] = array(
      '#title' => t('Add content'),
      // #attributes are used for list items (LI).
      '#attributes' => array('class' => array('mediacommons-editorialworkflow-create')),
      '#href' => 'contributor/add',
      // #options are passed to l().
      '#options' => array(
        'query' => drupal_get_destination(),
        '#access' => user_access('access mediacommons dashboard'),
        // Apply a class on the link (anchor).
        'attributes' => array('class' => array('mediacommons-editorialworkflow-create-link-anchor')),
      ),
      // #weight controls the order of links in the resulting item list.
      '#weight' => 1,
    );
    $content['menu']['dashboard']['profile'] = array(
      '#title' => t('Profile'),
      // #attributes are used for list items (LI).
      '#attributes' => array('class' => array('mediacommons-editorialworkflow-profile')),
      '#href' => 'contributor/add',
      // #options are passed to l().
      '#options' => array(
        'query' => drupal_get_destination(),
        '#access' => user_access('access mediacommons dashboard'),
        // Apply a class on the link (anchor).
        'attributes' => array('class' => array('mediacommons-editorialworkflow-profile-link-anchor')),
      ),
      // #weight controls the order of links in the resulting item list.
      '#weight' => 1,
    );
  }
}
